<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>Shell</title>

    <%= javascript_include_tag "jquery-term/jquery-1.7.1.min.js" %>
    <%= javascript_include_tag "jquery-term/jquery.mousewheel-min.js" %>
    <%= javascript_include_tag "jquery-term/jquery.terminal-src.js" %>
    <%= stylesheet_link_tag "jquery.terminal.css" %>

    <style>
    .terminal a.ui-slider-handle:focus { outline: none; }
    body { margin: 0; padding: 0; }
    html { background-color: #000; }
    .clear { clear: both; }
    /* This works only in Safari and Google Chrome */
    @media screen and (-webkit-min-device-pixel-ratio:0) {
        .terminal, .terminal .terminal-output, .terminal .terminal-output div,
        .terminal .terminal-output div div, .cmd, .terminal .cmd span, .terminal .cmd div {
        }
    }
    </style>

    <ul class="nav nav-tabs">
    <li class="active"><a href="#t-1" data-toggle="pill">Terminal 1</a></li>
    <li><a href="#t-2" data-toggle="pill">Terminal 2</a></li>
</ul>

<div class="tab-content" style="position:relative">
<div id="t-1" class="tab-pane active">

    <img style="position:fixed; left: 45%; top: 45%; z-index:1; height:40px; display:none" src="/assets/loading51.gif" id="loading-img1"/>

    <div id="terminal-1" class="tab-pane active">
    </div>
     <div class="span6">
        <!--<button id="refresh" class="btn btn-success">Get Data</button>-->
        <button id="kill" class="btn">Kill process</button>
        <button id="reset" class="btn">Reset</button>
    </div>
</div> <!-- t-1 -->
    
    <div id="t-2" class="tab-pane">
            <img style="position:fixed; left: 45%; top: 45%; z-index:1; height:40px; display:none" src="/assets/loading51.gif" id="loading-img2"/>

        <div class="row-fluid">
             <div id="terminal-2" class="tab-pane active">
              </div>
            <div class="span6">
                <!--<button id="refresh" class="btn btn-success">Get Data</button>-->
                <!-- <button id="kill" class="btn">Kill process</button>
                <button id="reset" class="btn">Reset</button> -->
            </div>
        </div>
    </div> <!-- t2 -->

</div><!-- tab-content -->
<script>
$(document).ready(function() {

     
        t1 = new CodelearnTerminal('1',0)
        t1.setup()

       t2 = new CodelearnTerminal('2',1)
  //      t2.setup()

    });

var _number = 0
var removeFirstOutputLine = true

function CodelearnTerminal(_id,_number) {

    var pwd, last_dir, home_dir;
    var id = _id
    var term_number = "#terminal-" +  id
    var loading_img = "#loading-img" + id

     function getElement(element) {
        return $("#t-"+id+" "+element)
    }

    console.log("Initializing" + term_number)
 
    var terminal = $(term_number).terminal(function(command, term) {
    
         
         if (command == 'vim' || command == 'emacs' || command == 'ruby' || command == 'python') {
            term.echo("Command not supported");
            return;
         }
        if (command.replace(/^ *(.*) *$/, '$1') == '-') {
            pwd = last_dir;
            return;
        }
        term.pause();
        $(loading_img).show()
        removeFirstOutputLine = true
        //first terminal
        var execution_url = "/terminals/" + _number + "/execute/"
        $.get(execution_url, {
            command: command
        }, function(response) {
            //fetchData(response)
            //pwd ="hemanth"
            fetchData(response,term,id)
            console.log ("Some data received")
            console.log("Data received - " + response.content)
            console.log("Status" +  response.status)
            /*
            if (response.status == "complete") {
                var lines = response.content.match(/^.*([\n\r]+|$)/gm);
                //lines.splice(0,1);
                //response.content = response.content.replace(/^.*?\r\n/,"")
                term.set_prompt(lines[lines.length-1])
                content = lines.join('')
                term.echo(response.content);
                term.resume()
            }*/

            //term.echo(response.status);

           // pwd = response.result.cwd;
            //term.resume();
        });
    }, {
        name: 'shell',
        prompt: cur_prompt
    }).css({
        overflow: 'auto'
    });
    this.terminal = terminal

    $(window).resize(function() {
       terminal.css('height', $(window).height()-20);
       //console.log(terminal.getTerm())
    }).resize();

 
this.setup = function() {

        //getElement("#refresh").click(function(){ poll(fetchData) });

        getElement("#kill").click(function(){
            $.ajax ({
                url: "/terminals/"+_number+"/kill",
                success: function(data){ fetchData(data,terminal,id) }
            })
        })

        getElement("#reset").click(function(){
            $.ajax({
                beforeSend: function() {
                    //getElement("#output").html('')
                    $("#loading-img").show()
                }
                , url: "/terminals/"+_number+"/reset",
                success: function(data) { fetchData(data,terminal,id) }
            })
        })

        initialize();
 
 } //setup

function initialize() {
        $.ajax({
            url: "/terminals/"+_number+"/execute/",
            success: function(data) { fetchData(data,terminal,id) }
            ,complete: function() { //getElement("input[name='command']").focus(); 
        }
        })
        terminal.echo("terminal initialized")
    } //initialize

var cur_prompt = "$"
var Scheduled

    function get_prompt_del_last_line(data){
        var lines = data.content.match(/^.*([\n\r]+|$)/gm);
        cur_prompt = lines[lines.length-1]
        return data.content.replace(/\r?\n?[^\r\n]*$/, "");
    }

    function _setTimeout(func,time) {
        clearTimeout(Scheduled)
        Scheduled = setTimeout(func,time)
    }

    function fetchData(data,term,id) {
        var loading_img = "#loading-img" + id
        if ( data.content != "") { 
            console.log("Data received - " + data.content)
            if (removeFirstOutputLine) {
                //remove first line, bcos its the command repeated
                data.content = data.content.replace(/^.*?\r\n/,"")
                removeFirstOutputLine = false
            }
            
            if(data.status == "complete"){
            //remove last line
               data.content = get_prompt_del_last_line(data)
            } 
            term.echo(data.content)
            
            //getElement("#output").append(data.content)
            //objDiv.scrollTop = objDiv.scrollHeight
        }
        if ( data.status == "waiting" ) {
            _setTimeout(function() {poll(fetchData,term)}, 1000)
        }
        else if (data.status == "error") {
            initialize()
        }
        else if (data.status == "complete") { //complete
            term.set_prompt(cur_prompt)   
            clearTimeout(Scheduled)
            term.resume()
            $(loading_img).hide()
        }
    }


    function poll(func,term) {
        console.log("inside poll")
        $.ajax( {
            url: "/terminals/"+_number+"/get",
            success : function(data, textStatus, jqXHR){
                if ( data == "" ) {
                    _setTimeout(function() {poll(func)}, 1000)
                }
                else {
                    func(data,term)
                }
            }
        })
    }
} //CodelearnTerminal


     $(document).ready(function() {
            $.get("/terminals/0/execute/", {

        }, function(response) {
            console.log(response.content)
            //get_prompt_del_last_line(response)
        });

    });


</script>
</head>
<body>
  <div id="shell"></div>
</body>
</html>